****************************************************************
* TITLE       : RESIZER
* FUNCTION    : Resize files based on info from csv file.
* DATE        : 7/11/96
* AUTHOR      : sjh
* REV DETAILS : Should be run after ResizeBuildList
**ned   10859  sjh  10/09/02
***************************************************************
*
      equ VOCId TO RzRec<1>
      equ Account TO RzRec<2>
      equ FileName TO RzRec<3>
      equ OldType TO RzRec<4>
      equ OldMod TO RzRec<5>
      equ OldSep TO RzRec<6>
      equ Bytes TO RzRec<7>
      equ Items TO RzRec<8>
      equ NewType TO RzRec<14>
      equ NewMod TO RzRec<15>
      equ NewSep TO RzRec<16>
*
      GOSUB Init
      IF OKToStart THEN
         GOSUB GetResizeList
         IF ErrMess = '' THEN
            GOSUB Main
         END ELSE
            CRT ErrMess
         END
      END
      STOP
*
Init:
*
      ErrMess = ''
      PROMPT ""
      HALF = @(-7)
      FULL = @(-8)
      BELL = CHAR(7)
      ErrMess = ""
      Today = DATE()
      TotalBytes = 0
      TotUsedTime = 0
*
      Days = 'Mon':@AM:'Tue':@AM:'Wed':@AM:'Thu':@AM:'Fri':@AM:'Sat':@AM:'Sun'
*
      Sent = FIELD(@SENTENCE, '|', 1)
      IF FIELD(Sent, ' ', 2) = 'UPDATE' THEN Update = 1 ELSE Update = 0
      ThisAcc = @WHO
      BaseAcc = FIELD(Sent, ' ', 3)
      IF BaseAcc = '' THEN BaseAcc = ThisAcc
      RunOpts = FIELD(@SENTENCE, '|', 2)
      RunOpts = EREPLACE(RunOpts, ',', @AM)
      ParFilNm = RunOpts<1>
      If ParFilNm = '' THEN ParFilNm = 'PARMS'
      RunAsDOW = RunOpts<2>
*
      OPEN ParFilNm TO F.PARMS THEN
         READ R.PARMS FROM F.PARMS, 'Resize' ELSE R.PARMS = ''
      END ELSE R.PARMS = ''
      *
      IF R.PARMS<1> = '' THEN
         R.PARMS<1> = "7200,7200,7200,7200,7200"
         R.PARMS<2> = "21600,21600,21600,21600,21600"
      END
      StartTimes = EREPLACE(R.PARMS<1>, ',', @VM)
      EndTimes = EREPLACE(R.PARMS<2>, ',', @VM)
      LogDir = R.PARMS<3>
      IF LogDir = '' THEN LogDir = '/tmp'
      ListName = BaseAcc:'_ResizeList.csv'
      CurrentAverage = R.PARMS<4>        ; * set starting avg bytes per second
      IF CurrentAverage < 1 THEN CurrentAverage = 100000
*
      IF RunAsDOW # '' AND NOT(Update) THEN
         DOW = RunAsDOW
      END ELSE DOW = OCONV(DATE(), "DW")
      StartDOW = DOW
      CRT 'Available Times':SPACE(40):'Mode: ':
      IF Update THEN CRT 'Update' ELSE CRT 'Testing'
      CRT '  Day   Start   End'
      FOR Z = 1 TO 7
         IF Z = DOW THEN TDFLAG = '*' ELSE TDFLAG = ' '
         CRT TDFLAG 'L#2' : Days<Z> 'L#4' : OCONV(StartTimes<1, Z>, 'MTS') 'L#9' : OCONV(EndTimes<1, Z>, 'MTS') 'L#9'
      NEXT Z
      CRT
      CRT 'Notes.'
      CRT '1. Start Time can be later than End Time, to allow overnight runs - in which case'
      CRT '   the End Time used will be from the following day.'
      CRT '2. You can also put "-" in Start Time, to prevent running on a day.'
      CRT '3. Blank time = midnight. If Start & End are both blank, all day run is assumed.'
      CRT '4. The default times can be over-ridden by setting up a "Resize" parameter'
      CRT
      *
      OKToStart = 0
      CurrTime = TIME()
      StartOfDay = StartTimes<1, DOW>
      IF StartOfDay = '-' THEN
         CRT Days<DOW>:' start of day = "-", so not running'
      END ELSE
         EndDOW = DOW
         TotAvailTime = 0
         IF EndTimes # '' THEN
            EndOfTimes = 0
            LOOP
               STm = StartTimes<1,EndDOW>
               ETm = EndTimes<1, EndDOW>
               BEGIN CASE
                  CASE EndDOW # DOW AND STm # ''
                     TotAvailTime = TotAvailTime + ETm
                     EndOfTimes = 1
                  CASE ETm = ''
                     TotAvailTime = TotAvailTime + 86400
                  CASE ETm # '' AND ETm < STm
                     TotAvailTime = TotAvailTime + (86400 - STm)
                  CASE 1
                     TotAvailTime = TotAvailTime + ETm - STm
                     EndOfTimes = 1
               END CASE
            UNTIL EndOfTimes
               EndDOW = EndDOW + 1
               IF EndDOW > 7 THEN EndDOW = 1
            REPEAT
         END
*
         StartOfDay = StartTimes<1, DOW>
         EndOfDay = EndTimes<1, DOW>
         BEGIN CASE
            CASE CurrTime < StartOfDay
               CRT 'Time is now: ' : OCONV(TIME(), 'MTS') : ', Sleeping until: ' : OCONV(StartOfDay, 'MTS')
               IF Update THEN
                  EXECUTE 'SLEEP ' : OCONV(StartOfDay, 'MTS')
                  OKToStart = 1
               END
            CASE CurrTime > EndOfDay AND EndOfDay > 0
               CRT 'Window missed'
            CASE 1
               CRT 'Starting now.'
               OKToStart = 1
         END CASE
      EndOfDay = EndTimes<1, EndDOW>
      CRT 'Window: ':Days<StartDOW>:' ':OCONV(StartOfDay+0, 'MTS'):' to ':Days<EndDOW>:' ':OCONV(EndOfDay, 'MTS')
      CRT 'Total available time = ' : OCONV(TotAvailTime, 'MTS') : ' (' : TotAvailTime : ')'
      CRT
*
!!!         CRT 'Using: ':LogDir:'/':ListName
      END
*
      RETURN
*
Main:
*
      RequiredTime = 0
      ResizeCt = DCOUNT(ResizeList, @AM)
      RzNo = 2                           ; * first 2 lines are column headings
      LOOP
         CurrTime = TIME()
         RzNo += 1
      UNTIL (RzNo > ResizeCt) OR ((TotAvailTime - TotUsedTime) < 1 AND Update) DO
         RzRec = EREPLACE(ResizeList<RzNo>, ',', @AM)
         IF Account = ThisAcc THEN
            ThisDOW = OCONV(DATE(), "DW")
            CRT FileName:' - resizing from ':OldType:',':OldMod:',':OldSep:' to ':NewType:',':NewMod:',':NewSep
            RzCmnd = 'RESIZE ':FileName:' ':NewType:' ':NewMod:' ':NewSep
            OK = 0
            GOSUB TimeCheck              ; * check to see if enough time
            IF OK OR NOT(Update) THEN
               IF NOT(Update) THEN
                  CRT '    Test mode - command = ':RzCmnd
               END ELSE
                  EXECUTE RzCmnd CAPTURING Stuff
                  GOSUB DisplayTimes     ; * calculate times
                  CRT
               END
            END ELSE
               CRT '   skipped - insufficient time'
            END
         END ELSE
            CRT Account:' ':FileName:' skipped. Not in This account (':ThisAcc:')'
         END
      REPEAT
      *
      RETURN
*
*-----------------subroutines----------------------*
*
DisplayTimes:* display times
      *
      EndTime = TIME()
      ResizeTime = EndTime - CurrTime
      IF ResizeTime LT 0 THEN ResizeTime = ResizeTime * -1
      TotUsedTime += ResizeTime
      IF TotUsedTime < 1 THEN TotUsedTime = 1
      TotalBytes += Bytes
      CurrentAverage = INT(TotalBytes / TotUsedTime)
      *
      DISPLAY.TIME = "   processed in " : OCONV(ResizeTime, "MTS") : ", total time = " : OCONV(TotUsedTime, "MTS")
      DISPLAY.TIME2 = "   Current average = " : CurrentAverage : " bytes per second."
      CRT DISPLAY.TIME
      CRT DISPLAY.TIME2
      CRT
      RETURN
*
TimeCheck:* check if enough time to process next file
*
      CURR.DOW = OCONV(DATE(), "DW")
      IF CURR.DOW < StartDOW THEN CURR.DOW = CURR.DOW + 7
!!!      ElapsedTime = ((CURR.DOW - StartDOW) * 86400) - StartOfDay + TIME()
      RequiredTime = INT(Bytes / CurrentAverage)
      OK = 0
      EstimatedEndTime = INT(Bytes / CurrentAverage) + TIME()
      IF EstimatedEndTime > 86400 THEN
         EstimatedEndTime = EstimatedEndTime - 86400
         *        New day
         DOW = DOW + 1
         IF DOW > 7 THEN DOW = 1
         EndOfDay = EndTimes<1, DOW>
         IF EndOfDay = '' THEN
            IF DOW = 7 THEN NEXTDOW = 1 ELSE NEXTDOW = DOW + 1
            NextEndOfDay = EndTimes<1, NEXTDOW>
            IF NextEndOfDay = '' THEN NextEndOfDay = 86400
            EndOfDay = 86400 + NextEndOfDay
         END
      END
      IF RequiredTime < (TotAvailTime - TotUsedTime) THEN OK = 1 ELSE OK = 0
      TimeLine = '   Start Time: ':Days<ThisDOW>:' ':OCONV(CurrTime, 'MTS')
      TimeLine := ', Tot Avail: ':OCONV(TotAvailTime, 'MTS')
      TimeLine := ', Tot Used: ':OCONV(TotUsedTime, 'MTS')
      TimeLine := ', Remaining: ':OCONV((TotAvailTime - TotUsedTime), 'MTS')
      TimeLine := ', Required: ':OCONV(RequiredTime, 'MTS')
      CRT TimeLine
      RETURN
*
*
99999:***** SYSTEM MESSAGE ROUTINE *****
      *
      X = INT((76 - LEN(ErrMess)) / 2)
      PRINT @(X, 22) : ErrMess :
      INPUT ANS, 5
      PRINT @(0, 22) : @(-4)
      RETURN
*
GetResizeList:
*
      OPENPATH LogDir TO F.LogDir THEN
         READ ResizeList FROM F.LogDir, ListName THEN
         END ELSE
            ErrMess = ListName:' not found in ':LogDir
         END
      END ELSE
         ErrMess = 'Cannot open ':LogDir:' - STOPPING!'
      END
*
      RETURN
*
OpenLog:
*
      IF LogDir[LEN(LogDir),1] # '/' THEN LogDir := '/'
      ListFilePath = LogDir:BaseAcc:'_ResizeList.csv'
      OPENSEQ ListFilePath TO ListFile LOCKED
         ErrMess = ListFilePath:' is locked by another process - STOPPING!'
      END ELSE
         ErrMess = 'Cannot open ':ListFilePath:' - STOPPING!'
      END
*
      RETURN
*
